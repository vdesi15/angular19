version: '3.9'

services:
  # ... (seal-ui, e2e-runner services are unchanged)

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    # ...
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    
   elasticsearch-setup:
    image: curlimages/curl
    container_name: elasticsearch-setup
    command: >
      sh -c "
        echo '--- Starting Elasticsearch Setup ---'
        
        # --- Stage 1: Wait for Elasticsearch to be healthy ---
        echo 'Waiting for Elasticsearch health...'
        until curl -s -f -u elastic:changeme http://elasticsearch:9200/_cluster/health?wait_for_status=yellow > /dev/null; do
          echo 'Elasticsearch not ready yet, sleeping 5s...'
          sleep 5
        done
        echo 'Elasticsearch is healthy!'
        
        # --- Stage 2: Set password for kibana_system user ---
        echo 'Attempting to set password for kibana_system user...'
        
        # ✨ THE FIX: Use a shell `if` statement to check the curl command's success.
        # We remove `-s` to see output and use `-f` to make it fail on HTTP errors.
        if curl -f -X POST -u elastic:changeme -H 'Content-Type: application/json' http://elasticsearch:9200/_security/user/kibana_system/_password -d '{\"password\" : \"kibanapass\"}'; then
          echo '✅ Successfully set password for kibana_system user.'
        else
          # If the curl command fails (non-zero exit code), this block will execute.
          echo '❌ ERROR: Failed to set password for kibana_system user. See curl output above for details.'
          exit 1 # Exit the container with a failure code.
        fi
        
        echo '--- Elasticsearch Setup Complete ---'
      "
    networks: ['monitoring-net']
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      # ✨ Kibana will now use the token for authentication ✨
      - ELASTICSEARCH_SERVICEACCOUNTTOKEN_FILE=/usr/share/kibana/tokens/kibana-token.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      elasticsearch:
        condition: service_healthy

  # ✨ THE UPDATED SETUP SERVICE ✨
  kibana-setup:
    container_name: kibana-setup
    # Tell Docker Compose to build the image from the kibana-setup directory
    build:
      context: ./kibana-setup
      dockerfile: Dockerfile
    networks:
      - monitoring-net
    # This service must wait for Kibana to be healthy before it runs
    depends_on:
      kibana:
        condition: service_healthy

  apm-server:
    image: docker.elastic.co/apm/apm-server:8.12.2
    container_name: apm-server
    # ... (environment variables are the same)
    networks:
      - monitoring-net
    # This service waits for the one-off setup container to complete successfully
    depends_on:
      kibana-setup:
        condition: service_completed_successfully

# ... (networks, volumes)