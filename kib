version: '3.9'

services:
  # --- Elasticsearch ---
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - monitoring-net
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=pass
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.license.self_generated.type=basic
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f -u elastic:pass http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 50
      start_period: 60s

  # --- Generate Kibana Service Token ---
  kibana-token-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: kibana-token-setup
    networks:
      - monitoring-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: "no"
    volumes:
      - kibana-token:/tmp/tokens
    command: >
      bash -c '
        echo "Waiting for Elasticsearch to be ready...";
        sleep 20;
        
        echo "Generating Kibana service account token...";
        
        # Create a service account token for Kibana
        TOKEN_RESPONSE=$(curl -s -X POST -u "elastic:pass" \
          -H "Content-Type: application/json" \
          "http://elasticsearch:9200/_security/service/elastic/kibana/credential/token" \
          -d "{\"name\": \"kibana-token\"}")
        
        if echo "$TOKEN_RESPONSE" | grep -q "value"; then
          TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o "\"value\":\"[^\"]*\"" | cut -d"\"" -f4)
          echo "$TOKEN" > /tmp/tokens/kibana_token
          echo "✓ Service token generated and saved"
        else
          echo "✗ Failed to generate service token: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "Service token setup complete!";
      '

  # --- Kibana ---
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    container_name: kibana
    ports:
      - '5601:5601'
    networks:
      - monitoring-net
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana-token-setup:
        condition: service_completed_successfully
    restart: on-failure:5
    volumes:
      - kibana-token:/tmp/tokens:ro
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_SERVICE_ACCOUNT_TOKEN_PATH=/tmp/tokens/kibana_token
      - xpack.encryptedSavedObjects.encryptionKey=a7a6311933d3503b89bc2dbc36572c33a6c10925682e591bffcab6911c06786d
      - xpack.reporting.encryptionKey=a7a6311933d3503b89bc2dbc36572c33a6c10925682e591bffcab6911c06786d
      - xpack.security.encryptionKey=a7a6311933d3503b89bc2dbc36572c33a6c10925682e591bffcab6911c06786d
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:5601/api/status | grep -q '\"overall\":{\"level\":\"available\"' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 50
      start_period: 90s

volumes:
  es-data:
    driver: local
  kibana-token:
    driver: local

networks:
  monitoring-net:
    driver: bridge